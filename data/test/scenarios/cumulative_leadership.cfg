#textdomain wesnoth-test

#####
# API(s) being tested: [leadership]cumulative=
##
# Actions:
# Start with Alice and Bob on a common keep.
# Give Alice several self-leadership abilities.
# Simulate combat, check the Alice does the expected amount of damage.
##
# Expected end state:
#####
{COMMON_KEEP_A_B_UNIT_TEST test_cumulative_leadership (
    [event]
        name=start

        [lua]
            code=<<
                function add_self_leadership(unit, ability_id, cumulative, value)
                    local T = wml.tag
                    local effects = {
                        T.effect {
                            apply_to = new_ability,
                            T.abilities = {
                                T.leadership = {
                                    id = ability_id,
                                    cumulative = cumulative,
                                    value = value,
                                    name = "leadership_with_id_" .. ability_id,
                                    affect_self = true
                                }
                            }
                        }
                    }
                    unit:add_modification("object", effects)
                end

                -- Assert that unit's attack, augmented by leadership skills, does expected_damage per strike.
				-- This stat doesn't appear to be directly available in the LuaAPI, so the test simulates combat
				-- with another unit (Bob needs to be passed as the target).
                function check_damage(unit, target, expected_damage, log_message)
                    unit_test.assert_greater_than(target.hp, 2 * expected_damage, "Test setup incorrect, this combat can do lethal damage")

					-- Assume they're both on castle tiles, so chance to be hit on one strike out of two is 2 * 40% * 60%.
					local att_stats, def_stats = wesnoth.simulate_combat(unit, target)
					local hp = target.hp - expected_damage
					unit_test.assert_approx_equal(def_stats[hp], 2 * 0.4 * 0.6, 0.001, log_message .. " didn't match expectation for " .. expected_damage .. " damage")
                end

                local alice = wesnoth.units.find({id="alice"})[1]
                local bob = wesnoth.units.find({id="bob"})[1]

                local clone_alice = alice:clone()
				check_damage(clone_alice, bob, 9, "No leadership")

                local clone_alice = alice:clone()
				add_self_leadership(clone_alice, "leadership", false, 0.12)
				check_damage(clone_alice, bob, 10, "12% leadership")
            >>
        [/lua]

        {SUCCEED}
    [/event]
)}
