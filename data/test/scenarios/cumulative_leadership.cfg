#textdomain wesnoth-test

#####
# API(s) being tested: [leadership]cumulative=
##
# Actions:
# Start with Alice and Bob on a common keep.
# Give Bob several self-leadership abilities.
# Simulate combat, check that Bob does the expected amount of damage.
##
# Expected end state:
#####
{COMMON_KEEP_A_B_UNIT_TEST test_cumulative_leadership (
    [event]
        name=start

        [lua]
            code=<<
                function add_self_leadership(unit, ability_id, cumulative, value)
                    local T = wml.tag
                    local effects = {
                        T.effect {
                            apply_to = "new_ability",
                            T.abilities {
                                T.leadership {
                                    id = ability_id,
                                    cumulative = "yes",
                                    value = value,
                                    name = "leadership_with_id_" .. ability_id,
                                    affect_self = true
                                }
                            }
                        }
                    }
                    unit:add_modification("object", effects)
                end

                -- Calculate the unit's damage per strike, including the effect of leadership skills.
				-- This stat doesn't appear to be directly available in the LuaAPI, so the test simulates combat
				-- with another unit (which needs to be passed as the target).
				function effective_damage(unit, target)
					local _, def_stats = wesnoth.simulate_combat(unit, target)

					local possible_hp = {}
					for hp,chance in pairs(def_stats.hp_chance) do
						if chance > 0.0001 then
							table.insert(possible_hp, hp)
						end
					end

					unit_test.assert_greater(#possible_hp, 1, "Combat appears to always leave the target at full health")
					table.sort(possible_hp)
					return possible_hp[#possible_hp] - possible_hp[#possible_hp - 1]
				end

                local alice = wesnoth.units.find({id="alice"})[1]
                local bob = wesnoth.units.find({id="bob"})[1]

                local clone_bob = bob:clone()
				unit_test.assert_equal(effective_damage(clone_bob, alice), 9, "0% leadership")

                local clone_bob = bob:clone()
				add_self_leadership(clone_bob, "leadership", false, 12)
				unit_test.assert_equal(effective_damage(clone_bob, alice), 10, "12% leadership")

                local clone_bob = bob:clone()
				add_self_leadership(clone_bob, "leadership", false, 24)
				unit_test.assert_equal(effective_damage(clone_bob, alice), 11, "24% leadership")

				-- Two abilities with the same ID, non-cumulative
                local clone_bob = bob:clone()
				add_self_leadership(clone_bob, "leadership", false, 12)
				add_self_leadership(clone_bob, "leadership", false, 12)
				unit_test.assert_equal(effective_damage(clone_bob, alice), 10, "12% + 12% but non-cumulative leadership")

				-- Two abilities with the different IDs, non-cumulative
                local clone_bob = bob:clone()
				add_self_leadership(clone_bob, "respect", false, 12)
				add_self_leadership(clone_bob, "inspire", false, 12)
				unit_test.assert_equal(effective_damage(clone_bob, alice), 11, "12% respect + 12% inspire leadership")

				-- TODO: the following three fail, because they only add the first of the two leadership abilities.

				-- Two abilities with the same ID, one cumulative
                local clone_bob = bob:clone()
				add_self_leadership(clone_bob, "leadership", true, 12)
				add_self_leadership(clone_bob, "leadership", false, 12)
				unit_test.assert_equal(effective_damage(clone_bob, alice), 11, "12% + 12% first cumulative leadership")

				-- Other one cumulative
                local clone_bob = bob:clone()
				add_self_leadership(clone_bob, "leadership", false, 12)
				add_self_leadership(clone_bob, "leadership", true, 12)
				unit_test.assert_equal(effective_damage(clone_bob, alice), 11, "12% + 12% second cumulative leadership")

				-- Both cumulative
                local clone_bob = bob:clone()
				add_self_leadership(clone_bob, "leadership", true, 12)
				add_self_leadership(clone_bob, "leadership", true, 12)
				unit_test.assert_equal(effective_damage(clone_bob, alice), 11, "12% + 12% both cumulative leadership")

            >>
        [/lua]

        {SUCCEED}
    [/event]
)}
