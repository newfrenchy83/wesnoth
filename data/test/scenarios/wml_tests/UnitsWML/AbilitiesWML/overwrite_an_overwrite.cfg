#textdomain wesnoth-test

#####
# API(s) being tested: [overwrite]priority=,[overwrite][filter_specials]
##
# Actions:
# TODO: fill in when I'm sure what needs testing
##
# Expected end state:
# TODO: expectation is currently under discussion
#####
{COMMON_KEEP_A_B_UNIT_TEST "overwrite_an_overwrite" (
    [event]
        name=start

        # Set up deterministic combat and ensure the units survive
        {FORCE_CHANCE_TO_HIT (id=alice) (id=bob) 0 ()}
        {FORCE_CHANCE_TO_HIT (id=bob) (id=alice) 100 ()}
        [modify_unit]
            [filter]
            [/filter]
            max_hitpoints=1000
            hitpoints=1000
        [/modify_unit]

        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [damage]
                        id=minimal_damage
                        value=1
                        overwrite_specials=one_side
                    [/damage]
                    [damage]
                        id=double_damage
                        multiply=2
                        overwrite_specials=one_side
                        [overwrite]
                            priority=2
                            [filter_specials]
                                id=minimal_damage
                            [/filter_specials]
                        [/overwrite]
                        [affect_adjacent]
                        [/affect_adjacent]
                    [/damage]
                [/abilities]
            [/effect]
            [filter]
                id=bob
            [/filter]
        [/object]

        # Bob's attack now does 18 damage. The unit_type's weapon does 9, minimal_damage has been overwritten, and double_damage is active.
        [event]
            name=attacker hits
            {ASSERT {VARIABLE_CONDITIONAL damage_inflicted equals 18}}
            {VARIABLE_OP events_triggered add 1}
        [/event]
        [test_do_attack_by_id]
            attacker=bob
            defender=alice
        [/test_do_attack_by_id]

        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [damage]
                        id=triple_damage
                        multiply=3
                        overwrite_specials=one_side
                        [overwrite]
                            priority=3
                            [filter_specials]
                                id=double_damage,seven_times_damage
                            [/filter_specials]
                        [/overwrite]
                        [affect_adjacent]
                        [/affect_adjacent]
                    [/damage]
                [/abilities]
            [/effect]
            [filter]
                id=bob
            [/filter]
        [/object]

        # Bob's attack now does 3 damage. The unit_type's weapon does 9, double_damage has been overwritten, minimal_damage isn't being overwritten because double_damage is overwritten, triple_damage is active.
        [event]
            name=attacker hits
            {ASSERT {VARIABLE_CONDITIONAL damage_inflicted equals 3}}
            {VARIABLE_OP events_triggered add 1}
        [/event]
        [test_do_attack_by_id]
            attacker=bob
            defender=alice
            resupply_attacks_left=1
        [/test_do_attack_by_id]

        [object]
            silent=yes
            [effect]
                apply_to=new_ability
                [abilities]
                    [damage]
                        id=seven_times_damage
                        multiply=7
                        overwrite_specials=one_side
                        [overwrite]
                            priority=7
                            [filter_specials]
                                # As this doesn't match double_damage, this isn't expected to affect double_damage's overwrite, so double_damage is still overwriting minimal_damage.
                                id=triple_damage
                            [/filter_specials]
                        [/overwrite]
                        [affect_adjacent]
                        [/affect_adjacent]
                    [/damage]
                [/abilities]
            [/effect]
            [filter]
                id=bob
            [/filter]
        [/object]

        # Bob's attack now does 126 damage. The unit_type's weapon does 9, double_damage and seven_times_damage are active.
        [event]
            name=attacker hits
            {ASSERT {VARIABLE_CONDITIONAL damage_inflicted equals 126}}
            {VARIABLE_OP events_triggered add 1}
        [/event]
        [test_do_attack_by_id]
            attacker=bob
            defender=alice
            resupply_attacks_left=1
        [/test_do_attack_by_id]

        {ASSERT {VARIABLE_CONDITIONAL events_triggered equals 3}}
        {SUCCEED}
    [/event]
)}
